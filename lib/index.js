// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Client, Deployer, Proxy, Task, events,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  events = require('events');

  Client = require('./client');

  Proxy = require('./proxy');

  Task = require('./task');

  Deployer = (function(superClass) {
    extend(Deployer, superClass);

    function Deployer(options, logger1) {
      var i, j, len, len1, ref, ref1, ref2, serverOptions, taskOptions;
      if (options == null) {
        options = {};
      }
      this.logger = logger1 != null ? logger1 : console;
      this.clients = {};
      this.tasks = [];
      this.readyThreshold = options.readyThreshold || ((ref = options.servers) != null ? ref.length : void 0) || 1;
      if (options.servers == null) {
        options.servers = [];
      }
      if (options.tasks == null) {
        options.tasks = [];
      }
      if (options.proxy != null) {
        this.setProxy(options.proxy);
      }
      ref1 = options.servers;
      for (i = 0, len = ref1.length; i < len; i++) {
        serverOptions = ref1[i];
        this.addServer(serverOptions);
      }
      ref2 = options.tasks;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        taskOptions = ref2[j];
        this.addTask(taskOptions);
      }
    }

    Deployer.prototype.setLogger = function(logger) {
      return this.logger = logger;
    };

    Deployer.prototype.setProxy = function(proxy) {
      this.proxy = new Proxy(proxy, this.logger);
      this.proxy.on('ready', (function(_this) {
        return function() {
          return _this.logger.log("proxy connected");
        };
      })(this));
      this.proxy.on('error', (function(_this) {
        return function(err) {
          return _this.logger.error("proxy connect failed", err);
        };
      })(this));
      this.proxy.on('closed', (function(_this) {
        return function() {
          var client, name, ref, results;
          ref = _this.clients;
          results = [];
          for (name in ref) {
            client = ref[name];
            if (client.useProxy) {
              results.push(client != null ? client.disconnect() : void 0);
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
      return this.proxy.connect();
    };

    Deployer.prototype.ready = function() {
      if (Object.keys(this.clients).length >= this.readyThreshold) {
        return this.emit('ready');
      }
    };

    Deployer.prototype.addServer = function(serverOptions, callback) {
      var client;
      if (serverOptions == null) {
        return;
      }
      if (serverOptions.proxy == null) {
        serverOptions.proxy = this.proxy;
      }
      client = new Client(serverOptions, this.logger, this.proxy);
      client.once('ready', (function(_this) {
        return function() {
          _this.clients[serverOptions.name] = client;
          _this.logger.log(serverOptions.name + " connected");
          _this.ready();
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
      client.once('error', (function(_this) {
        return function(err) {
          _this.logger.error(serverOptions.name + " connect failed", err);
          _this.clients[serverOptions.name] = null;
          return typeof callback === "function" ? callback(err) : void 0;
        };
      })(this));
      client.once('closed', (function(_this) {
        return function() {
          _this.logger.error(serverOptions.name + " closed");
          return _this.clients[serverOptions.name] = null;
        };
      })(this));
      return client.connect();
    };

    Deployer.prototype.removeServer = function(name, callback) {
      client.once('closed', (function(_this) {
        return function() {
          _this.clients[name] = null;
          delete _this.clients[name];
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
      setTimeout((function(_this) {
        return function() {
          _this.clients[name] = null;
          delete _this.clients[name];
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this), 3 * 1000);
      return client.close();
    };

    Deployer.prototype.addTask = function(options) {
      if (options == null) {
        return;
      }
      return this.tasks.push(new Task(options, this.logger));
    };

    Deployer.prototype.removeTask = function(name) {
      var index;
      index = this.tasks.findIndex(function(_task) {
        return (_task != null) && _task.name === name;
      });
      if (index > -1) {
        return this.tasks.splice(index, 1);
      }
    };

    Deployer.prototype.sort = function(callback) {
      return this.tasks.sort(callback || function(pre, next) {
        if (pre.priority == null) {
          pre.priority = 0;
        }
        if (next.priority == null) {
          next.priority = 0;
        }
        return next.priority - pre.priority;
      });
    };

    Deployer.prototype.start = function() {
      var next, tasks;
      tasks = this.sort();
      next = (function(_this) {
        return function() {
          var _task;
          if (!(tasks.length > 0)) {
            return _this.emit('done');
          }
          _task = tasks.shift();
          if (_task == null) {
            return;
          }
          return _task.exec(_this.clients, next);
        };
      })(this);
      return next();
    };

    return Deployer;

  })(events.EventEmitter);

  module.exports = Deployer;

}).call(this);
